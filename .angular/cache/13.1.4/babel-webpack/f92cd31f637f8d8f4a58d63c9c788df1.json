{"ast":null,"code":"import { Component, Host, Input } from '@angular/core';\nimport { ProgressDirective } from './progress.directive'; // todo: number pipe\n// todo: use query from progress?\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './progress.directive';\nimport * as ɵngcc2 from '@angular/common';\n\nvar _c0 = function (a0, a1) {\n  return {\n    width: a0,\n    transition: a1\n  };\n};\n\nvar _c1 = [\"*\"];\nexport var BarComponent = function () {\n  function BarComponent(progress) {\n    this.percent = 0;\n    this.progress = progress;\n  }\n\n  Object.defineProperty(BarComponent.prototype, \"value\", {\n    /** current value of progress bar */\n    get: function () {\n      return this._value;\n    },\n    set: function (v) {\n      if (!v && v !== 0) {\n        return;\n      }\n\n      this._value = v;\n      this.recalculatePercentage();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BarComponent.prototype.ngOnInit = function () {\n    this.progress.addBar(this);\n  };\n\n  BarComponent.prototype.ngOnDestroy = function () {\n    this.progress.removeBar(this);\n  };\n\n  BarComponent.prototype.recalculatePercentage = function () {\n    this.percent = +(100 * this.value / this.progress.max).toFixed(2);\n    var totalPercentage = this.progress.bars.reduce(function (total, bar) {\n      return total + bar.percent;\n    }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  };\n  /** @nocollapse */\n\n\n  BarComponent.ctorParameters = function () {\n    return [{\n      type: ProgressDirective,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  };\n\n  BarComponent.propDecorators = {\n    'type': [{\n      type: Input\n    }],\n    'value': [{\n      type: Input\n    }]\n  };\n\n  BarComponent.ɵfac = function BarComponent_Factory(t) {\n    return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProgressDirective, 1));\n  };\n\n  BarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarComponent,\n    selectors: [[\"bar\"]],\n    inputs: {\n      value: \"value\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 8,\n    consts: [[\"role\", \"progressbar\", \"aria-valuemin\", \"0\", 1, \"progress-bar\", 2, \"min-width\", \"0\", 3, \"ngClass\", \"ngStyle\"]],\n    template: function BarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.type && \"progress-bar-\" + ctx.type)(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(5, _c0, (ctx.percent < 100 ? ctx.percent : 100) + \"%\", ctx.transition));\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent.toFixed(0) + \"%\")(\"aria-valuemax\", ctx.max);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgStyle],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return BarComponent;\n}(); //# sourceMappingURL=bar.component.js.map","map":null,"metadata":{},"sourceType":"module"}