{"ast":null,"code":"import { Component, ElementRef, Renderer, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PaginationConfig } from './pagination.config';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './pagination.config';\nimport * as ɵngcc2 from '@angular/common';\n\nvar _c0 = function (a0) {\n  return {\n    \"pull-right\": a0\n  };\n};\n\nexport var PAGER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return PagerComponent;\n  }),\n  multi: true\n};\nvar PAGER_TEMPLATE = \"\\n    <ul class=\\\"pager\\\">\\n      <li [class.disabled]=\\\"noPrevious()\\\" [class.previous]=\\\"align\\\" [ngClass]=\\\"{'pull-right': align}\\\" class=\\\"{{ pageBtnClass }}\\\">\\n        <a href (click)=\\\"selectPage(page - 1, $event)\\\">{{getText('previous')}}</a>\\n      </li>\\n      <li [class.disabled]=\\\"noNext()\\\" [class.next]=\\\"align\\\" [ngClass]=\\\"{'pull-right': align}\\\" class=\\\"{{ pageBtnClass }}\\\">\\n        <a href (click)=\\\"selectPage(page + 1, $event)\\\">{{getText('next')}}</a>\\n      </li>\\n  </ul>\\n\";\nexport var PagerComponent = function () {\n  function PagerComponent(renderer, elementRef, paginationConfig) {\n    /** fired when total pages count changes, $event:number equals to total pages count */\n    this.numPages = new EventEmitter();\n    /** fired when page was changed, $event:{page, itemsPerPage} equals to object with current page index and number of items per page */\n\n    this.pageChanged = new EventEmitter();\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n    this.inited = false;\n    this._page = 1;\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n\n    if (!this.config) {\n      this.configureOptions(Object.assign({}, paginationConfig.main, paginationConfig.pager));\n    }\n  }\n\n  Object.defineProperty(PagerComponent.prototype, \"itemsPerPage\", {\n    /** maximum number of items per page. If value less than 1 will display all items on one page */\n    get: function () {\n      return this._itemsPerPage;\n    },\n    set: function (v) {\n      this._itemsPerPage = v;\n      this.totalPages = this.calculateTotalPages();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PagerComponent.prototype, \"totalItems\", {\n    /** total number of items in all pages */\n    get: function () {\n      return this._totalItems;\n    },\n    set: function (v) {\n      this._totalItems = v;\n      this.totalPages = this.calculateTotalPages();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PagerComponent.prototype, \"totalPages\", {\n    get: function () {\n      return this._totalPages;\n    },\n    set: function (v) {\n      this._totalPages = v;\n      this.numPages.emit(v);\n\n      if (this.inited) {\n        this.selectPage(this.page);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PagerComponent.prototype, \"page\", {\n    get: function () {\n      return this._page;\n    },\n    set: function (value) {\n      var _previous = this._page;\n      this._page = value > this.totalPages ? this.totalPages : value || 1;\n\n      if (_previous === this._page || typeof _previous === 'undefined') {\n        return;\n      }\n\n      this.pageChanged.emit({\n        page: this._page,\n        itemsPerPage: this.itemsPerPage\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PagerComponent.prototype.configureOptions = function (config) {\n    this.config = Object.assign({}, config);\n  };\n\n  PagerComponent.prototype.ngOnInit = function () {\n    this.classMap = this.elementRef.nativeElement.getAttribute('class') || ''; // watch for maxSize\n\n    this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n    this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n    this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n    this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n    this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n    this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n    this.totalPages = this.calculateTotalPages(); // this class\n\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  };\n\n  PagerComponent.prototype.writeValue = function (value) {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  };\n\n  PagerComponent.prototype.getText = function (key) {\n    return this[key + 'Text'] || this.config[key + 'Text'];\n  };\n\n  PagerComponent.prototype.noPrevious = function () {\n    return this.page === 1;\n  };\n\n  PagerComponent.prototype.noNext = function () {\n    return this.page === this.totalPages;\n  };\n\n  PagerComponent.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  PagerComponent.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n\n  PagerComponent.prototype.selectPage = function (page, event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        var target = event.target;\n        target.blur();\n      }\n\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }; // Create page object used in template\n\n\n  PagerComponent.prototype.makePage = function (num, text, active) {\n    return {\n      text: text,\n      number: num,\n      active: active\n    };\n  };\n\n  PagerComponent.prototype.getPages = function (currentPage, totalPages) {\n    var pages = []; // Default page limits\n\n    var startPage = 1;\n    var endPage = totalPages;\n    var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n    if (isMaxSized) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    } // Add page number links\n\n\n    for (var num = startPage; num <= endPage; num++) {\n      var page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    } // Add links to move between page sets\n\n\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        var previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        var nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }; // base class\n\n\n  PagerComponent.prototype.calculateTotalPages = function () {\n    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n    return Math.max(totalPages || 0, 1);\n  };\n  /** @nocollapse */\n\n\n  PagerComponent.ctorParameters = function () {\n    return [{\n      type: Renderer\n    }, {\n      type: ElementRef\n    }, {\n      type: PaginationConfig\n    }];\n  };\n\n  PagerComponent.propDecorators = {\n    'align': [{\n      type: Input\n    }],\n    'maxSize': [{\n      type: Input\n    }],\n    'boundaryLinks': [{\n      type: Input\n    }],\n    'directionLinks': [{\n      type: Input\n    }],\n    'firstText': [{\n      type: Input\n    }],\n    'previousText': [{\n      type: Input\n    }],\n    'nextText': [{\n      type: Input\n    }],\n    'lastText': [{\n      type: Input\n    }],\n    'rotate': [{\n      type: Input\n    }],\n    'pageBtnClass': [{\n      type: Input\n    }],\n    'disabled': [{\n      type: Input\n    }],\n    'numPages': [{\n      type: Output\n    }],\n    'pageChanged': [{\n      type: Output\n    }],\n    'itemsPerPage': [{\n      type: Input\n    }],\n    'totalItems': [{\n      type: Input\n    }]\n  };\n\n  PagerComponent.ɵfac = function PagerComponent_Factory(t) {\n    return new (t || PagerComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PaginationConfig));\n  };\n\n  PagerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PagerComponent,\n    selectors: [[\"pager\"]],\n    inputs: {\n      itemsPerPage: \"itemsPerPage\",\n      totalItems: \"totalItems\",\n      maxSize: \"maxSize\",\n      rotate: \"rotate\",\n      boundaryLinks: \"boundaryLinks\",\n      directionLinks: \"directionLinks\",\n      pageBtnClass: \"pageBtnClass\",\n      align: \"align\",\n      firstText: \"firstText\",\n      previousText: \"previousText\",\n      nextText: \"nextText\",\n      lastText: \"lastText\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      numPages: \"numPages\",\n      pageChanged: \"pageChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PAGER_CONTROL_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 22,\n    consts: [[1, \"pager\"], [3, \"ngClass\"], [\"href\", \"\", 3, \"click\"]],\n    template: function PagerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"li\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_2_listener($event) {\n          return ctx.selectPage(ctx.page - 1, $event);\n        });\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"li\", 1);\n        ɵngcc0.ɵɵelementStart(5, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_5_listener($event) {\n          return ctx.selectPage(ctx.page + 1, $event);\n        });\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noPrevious())(\"previous\", ctx.align);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(18, _c0, ctx.align));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"previous\"));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noNext())(\"next\", ctx.align);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(20, _c0, ctx.align));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"next\"));\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return PagerComponent;\n}(); //# sourceMappingURL=pager.component.js.map","map":null,"metadata":{},"sourceType":"module"}