{"ast":null,"code":"import { Component, Input, Output, ChangeDetectionStrategy, EventEmitter, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n/** This allows support [(ngModel)] and ngControl. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '../pipe/bar-rating.pipe';\n\nfunction BarRatingComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function BarRatingComponent_div_2_Template_div_click_0_listener($event) {\n      var restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      var unit_r2 = restoredCtx.$implicit;\n      return unit_r2.click($event);\n    })(\"mouseenter\", function BarRatingComponent_div_2_Template_div_mouseenter_0_listener() {\n      var restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      var unit_r2 = restoredCtx.$implicit;\n      return unit_r2.enter();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var unit_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"br-fraction\", unit_r2.fraction)(\"br-selected\", unit_r2.selected)(\"br-active\", unit_r2.active);\n  }\n}\n\nfunction BarRatingComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"rateTitle\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.nextRate, ctx_r1.titles));\n  }\n}\n\nvar RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return BarRatingComponent;\n  }),\n  multi: true\n};\n/** This allows control required validation. */\n\nvar RATING_VALUE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return BarRatingComponent;\n  }),\n  multi: true\n};\n\nvar BarRatingComponent = function () {\n  function BarRatingComponent(changeDetectorRef) {\n    this.changeDetectorRef = changeDetectorRef;\n    this.contexts = [];\n    /** Maximal rating that can be given using this widget. */\n\n    this.max = 5;\n    /** A flag indicating if rating can be updated. */\n\n    this.readOnly = false;\n    /** Set the theme */\n\n    this.theme = 'default';\n    /** Show rating title */\n\n    this.showText = false;\n    /** Replace rate value with a title */\n\n    this.titles = [];\n    /** A flag indicating if rating is required for form validation. */\n\n    this.required = false;\n    /** An event fired when a user is hovering over a given rating.\r\n     * Event's payload equals to the rating being hovered over. */\n\n    this.hover = new EventEmitter();\n    /** An event fired when a user stops hovering over a given rating.\r\n     * Event's payload equals to the rating of the last item being hovered over. */\n\n    this.leave = new EventEmitter();\n    /** An event fired when a user selects a new rating.\r\n     * Event's payload equals to the newly selected rating. */\n\n    this.rateChange = new EventEmitter(true);\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {};\n  }\n\n  BarRatingComponent.prototype.ngOnChanges = function (changes) {\n    if (changes['rate']) {\n      this.update(this.rate);\n    }\n  };\n\n  BarRatingComponent.prototype.ngOnInit = function () {\n    var _this = this;\n\n    this.contexts = Array.from({\n      length: this.max\n    }, function (context, i) {\n      return {\n        selected: false,\n        fraction: false,\n        click: function (e) {\n          return _this.handleClick(e, i + 1);\n        },\n        enter: function () {\n          return _this.handleEnter(i + 1);\n        }\n      };\n    });\n    this.updateState(this.rate);\n  };\n\n  BarRatingComponent.prototype.update = function (newRate, internalChange) {\n    if (internalChange === void 0) {\n      internalChange = true;\n    }\n\n    if (!this.readOnly && !this.disabled && this.rate !== newRate) {\n      this.rate = newRate;\n      this.rateChange.emit(this.rate);\n    }\n\n    if (internalChange) {\n      this.onChange(this.rate);\n      this.onTouched();\n    }\n\n    this.updateState(this.rate);\n  };\n  /** Reset rate value */\n\n\n  BarRatingComponent.prototype.reset = function () {\n    this.leave.emit(this.nextRate);\n    this.updateState(this.rate);\n  };\n\n  BarRatingComponent.prototype.updateState = function (nextValue) {\n    var _this = this;\n    /** Set rate value as text */\n\n\n    this.nextRate = nextValue - 1;\n    /** Set the rating */\n\n    this.contexts = Array.from({\n      length: this.max\n    }, function (context, index) {\n      return {\n        selected: index + 1 <= nextValue,\n        fraction: (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5,\n        click: function (e) {\n          return _this.handleClick(e, index);\n        },\n        enter: function () {\n          return _this.handleEnter(index);\n        }\n      };\n    });\n  };\n\n  BarRatingComponent.prototype.handleClick = function (e, value) {\n    /** (NOT TESTED) Remove 300ms click delay on touch devices */\n    e.preventDefault();\n    e.stopPropagation();\n    this.update(value + 1);\n  };\n\n  BarRatingComponent.prototype.handleEnter = function (index) {\n    if (!this.disabled && !this.readOnly) {\n      /** Add selected class for rating hover */\n      this.contexts.map(function (context, i) {\n        context.active = i <= index;\n        context.fraction = false;\n        context.selected = false;\n      });\n      this.nextRate = index;\n      this.hover.emit(index);\n    }\n  };\n  /** This is the initial value set to the component */\n\n\n  BarRatingComponent.prototype.writeValue = function (value) {\n    this.update(value, false);\n    this.changeDetectorRef.markForCheck();\n  };\n\n  BarRatingComponent.prototype.validate = function (c) {\n    return this.required && !c.value ? {\n      required: true\n    } : null;\n  };\n\n  BarRatingComponent.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  BarRatingComponent.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n\n  BarRatingComponent.prototype.setDisabledState = function (isDisabled) {\n    this.disabled = isDisabled;\n  };\n\n  BarRatingComponent.ɵfac = function BarRatingComponent_Factory(t) {\n    return new (t || BarRatingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  BarRatingComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarRatingComponent,\n    selectors: [[\"bar-rating\"]],\n    inputs: {\n      max: \"max\",\n      readOnly: \"readOnly\",\n      theme: \"theme\",\n      showText: \"showText\",\n      titles: \"titles\",\n      required: \"required\",\n      rate: \"rate\"\n    },\n    outputs: {\n      hover: \"hover\",\n      leave: \"leave\",\n      rateChange: \"rateChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 8,\n    consts: [[1, \"br-units\", 3, \"mouseleave\"], [\"class\", \"br-unit\", 3, \"br-fraction\", \"br-selected\", \"br-active\", \"click\", \"mouseenter\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"br-text\", 4, \"ngIf\"], [1, \"br-unit\", 3, \"click\", \"mouseenter\"], [1, \"br-text\"]],\n    template: function BarRatingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function BarRatingComponent_Template_div_mouseleave_1_listener() {\n          return ctx.reset();\n        });\n        ɵngcc0.ɵɵtemplate(2, BarRatingComponent_div_2_Template, 1, 6, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, BarRatingComponent_div_3_Template, 3, 4, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(\"br br-\" + ctx.theme);\n        ɵngcc0.ɵɵclassProp(\"br-readonly\", ctx.readOnly)(\"br-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.contexts);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showText);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n    pipes: [ɵngcc2.BarRatingPipe],\n    styles: [\"*[_ngcontent-%COMP%]{box-sizing:border-box}.br[_ngcontent-%COMP%]{position:relative;margin:15px 0}.br-units[_ngcontent-%COMP%]{display:-ms-flexbox;display:flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap}.br-unit[_ngcontent-%COMP%]{cursor:pointer;-webkit-font-smoothing:antialiased;text-rendering:auto}.br-disabled[_ngcontent-%COMP%]   .br-unit[_ngcontent-%COMP%], .br-readonly[_ngcontent-%COMP%]   .br-unit[_ngcontent-%COMP%]{cursor:default}\"],\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return BarRatingComponent;\n}();\n\nexport { BarRatingComponent };\n/** @nocollapse */\n\nBarRatingComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nBarRatingComponent.propDecorators = {\n  'rate': [{\n    type: Input\n  }],\n  'max': [{\n    type: Input\n  }],\n  'readOnly': [{\n    type: Input\n  }],\n  'theme': [{\n    type: Input\n  }],\n  'showText': [{\n    type: Input\n  }],\n  'titles': [{\n    type: Input\n  }],\n  'required': [{\n    type: Input\n  }],\n  'hover': [{\n    type: Output\n  }],\n  'leave': [{\n    type: Output\n  }],\n  'rateChange': [{\n    type: Output\n  }]\n}; //# sourceMappingURL=bar-rating.component.js.map","map":null,"metadata":{},"sourceType":"module"}