{"ast":null,"code":"import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';\nimport { BsDropdownState } from './bs-dropdown.state';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './bs-dropdown.state';\nexport var BsDropdownToggleDirective = function () {\n  function BsDropdownToggleDirective(_state, _element) {\n    var _this = this;\n\n    this._state = _state;\n    this._element = _element;\n    this.isDisabled = null;\n    this._subscriptions = []; // sync is open value with state\n\n    this._subscriptions.push(this._state.isOpenChange.subscribe(function (value) {\n      return _this.isOpen = value;\n    })); // populate disabled state\n\n\n    this._subscriptions.push(this._state.isDisabledChange.subscribe(function (value) {\n      return _this.isDisabled = value || null;\n    }));\n  }\n\n  BsDropdownToggleDirective.prototype.onClick = function () {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this._state.toggleClick.emit();\n  };\n\n  BsDropdownToggleDirective.prototype.onDocumentClick = function (event) {\n    if (this._state.autoClose && event.button !== 2 && !this._element.nativeElement.contains(event.target)) {\n      this._state.toggleClick.emit(false);\n    }\n  };\n\n  BsDropdownToggleDirective.prototype.onEsc = function () {\n    if (this._state.autoClose) {\n      this._state.toggleClick.emit(false);\n    }\n  };\n\n  BsDropdownToggleDirective.prototype.ngOnDestroy = function () {\n    for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {\n      var sub = _a[_i];\n      sub.unsubscribe();\n    }\n  };\n  /** @nocollapse */\n\n\n  BsDropdownToggleDirective.ctorParameters = function () {\n    return [{\n      type: BsDropdownState\n    }, {\n      type: ElementRef\n    }];\n  };\n\n  BsDropdownToggleDirective.propDecorators = {\n    'isDisabled': [{\n      type: HostBinding,\n      args: ['attr.disabled']\n    }],\n    'isOpen': [{\n      type: HostBinding,\n      args: ['attr.aria-expanded']\n    }],\n    'onClick': [{\n      type: HostListener,\n      args: ['click']\n    }],\n    'onDocumentClick': [{\n      type: HostListener,\n      args: ['document:click', ['$event']]\n    }],\n    'onEsc': [{\n      type: HostListener,\n      args: ['keyup.esc']\n    }]\n  };\n\n  BsDropdownToggleDirective.ɵfac = function BsDropdownToggleDirective_Factory(t) {\n    return new (t || BsDropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BsDropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  BsDropdownToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownToggleDirective,\n    selectors: [[\"\", \"bsDropdownToggle\", \"\"], [\"\", \"dropdownToggle\", \"\"]],\n    hostVars: 3,\n    hostBindings: function BsDropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        })(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onDocumentClick($event);\n        }, false, ɵngcc0.ɵɵresolveDocument)(\"keyup.esc\", function BsDropdownToggleDirective_keyup_esc_HostBindingHandler() {\n          return ctx.onEsc();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", true)(\"disabled\", ctx.isDisabled)(\"aria-expanded\", ctx.isOpen);\n      }\n    },\n    exportAs: [\"bs-dropdown-toggle\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return BsDropdownToggleDirective;\n}(); //# sourceMappingURL=bs-dropdown-toggle.directive.js.map","map":null,"metadata":{},"sourceType":"module"}