{"ast":null,"code":"import { Trigger } from './trigger.class';\nvar DEFAULT_ALIASES = {\n  hover: ['mouseenter', 'mouseleave'],\n  focus: ['focusin', 'focusout']\n};\nexport function parseTriggers(triggers, aliases) {\n  if (aliases === void 0) {\n    aliases = DEFAULT_ALIASES;\n  }\n\n  var trimmedTriggers = (triggers || '').trim();\n\n  if (trimmedTriggers.length === 0) {\n    return [];\n  }\n\n  var parsedTriggers = trimmedTriggers.split(/\\s+/).map(function (trigger) {\n    return trigger.split(':');\n  }).map(function (triggerPair) {\n    var alias = aliases[triggerPair[0]] || triggerPair;\n    return new Trigger(alias[0], alias[1]);\n  });\n  var manualTriggers = parsedTriggers.filter(function (triggerPair) {\n    return triggerPair.isManual();\n  });\n\n  if (manualTriggers.length > 1) {\n    throw 'Triggers parse error: only one manual trigger is allowed';\n  }\n\n  if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n    throw 'Triggers parse error: manual trigger can\\'t be mixed with other triggers';\n  }\n\n  return parsedTriggers;\n}\nexport function listenToTriggers(renderer, target, triggers, showFn, hideFn, toggleFn) {\n  var parsedTriggers = parseTriggers(triggers);\n  var listeners = [];\n\n  if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n    return Function.prototype;\n  }\n\n  parsedTriggers.forEach(function (trigger) {\n    if (trigger.open === trigger.close) {\n      listeners.push(renderer.listen(target, trigger.open, toggleFn));\n      return;\n    }\n\n    listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));\n  });\n  return function () {\n    listeners.forEach(function (unsubscribeFn) {\n      return unsubscribeFn();\n    });\n  };\n} //# sourceMappingURL=triggers.js.map","map":null,"metadata":{},"sourceType":"module"}