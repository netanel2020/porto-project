{"ast":null,"code":"import { Directive, ElementRef, HostBinding, forwardRef, HostListener, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nexport var RADIO_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return ButtonRadioDirective;\n  }),\n  multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n\nexport var ButtonRadioDirective = function () {\n  function ButtonRadioDirective(el) {\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n    this.el = el;\n  }\n\n  Object.defineProperty(ButtonRadioDirective.prototype, \"isActive\", {\n    get: function () {\n      return this.btnRadio === this.value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ButtonRadioDirective.prototype.onClick = function () {\n    if (this.el.nativeElement.attributes.disabled) {\n      return;\n    }\n\n    if (this.uncheckable && this.btnRadio === this.value) {\n      this.value = undefined;\n    } else {\n      this.value = this.btnRadio;\n    }\n\n    this.onTouched();\n    this.onChange(this.value);\n  };\n\n  ButtonRadioDirective.prototype.ngOnInit = function () {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  };\n\n  ButtonRadioDirective.prototype.onBlur = function () {\n    this.onTouched();\n  }; // ControlValueAccessor\n  // model -> view\n\n\n  ButtonRadioDirective.prototype.writeValue = function (value) {\n    this.value = value;\n  };\n\n  ButtonRadioDirective.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  ButtonRadioDirective.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  /** @nocollapse */\n\n\n  ButtonRadioDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  ButtonRadioDirective.propDecorators = {\n    'btnRadio': [{\n      type: Input\n    }],\n    'uncheckable': [{\n      type: Input\n    }],\n    'value': [{\n      type: Input\n    }],\n    'isActive': [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    'onClick': [{\n      type: HostListener,\n      args: ['click']\n    }]\n  };\n\n  ButtonRadioDirective.ɵfac = function ButtonRadioDirective_Factory(t) {\n    return new (t || ButtonRadioDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ButtonRadioDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ButtonRadioDirective,\n    selectors: [[\"\", \"btnRadio\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ButtonRadioDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ButtonRadioDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      uncheckable: \"uncheckable\",\n      btnRadio: \"btnRadio\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR])]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return ButtonRadioDirective;\n}(); //# sourceMappingURL=button-radio.directive.js.map","map":null,"metadata":{},"sourceType":"module"}