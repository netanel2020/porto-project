{"ast":null,"code":"import { Component, HostBinding, Inject, Input } from '@angular/core';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\nimport { AccordionComponent } from './accordion.component';\n/*\n * ### Accordion heading\n\n Instead of using `heading` attribute on the `accordion-group`, you can use an `accordion-heading` attribute on `any` element inside of a group that will be used as group's header template.\n\n * */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '../collapse/collapse.directive';\nimport * as ɵngcc3 from './accordion.component';\n\nvar _c0 = function (a0) {\n  return {\n    \"text-muted\": a0\n  };\n};\n\nfunction AccordionPanelComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.isDisabled));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.heading);\n  }\n}\n\nvar _c1 = [[[\"\", \"accordion-heading\", \"\"]], \"*\"];\nvar _c2 = [\"[accordion-heading]\", \"*\"];\nexport var AccordionPanelComponent = function () {\n  function AccordionPanelComponent(accordion) {\n    this.accordion = accordion;\n  }\n\n  Object.defineProperty(AccordionPanelComponent.prototype, \"isOpen\", {\n    // Questionable, maybe .panel-open should be on child div.panel element?\n\n    /** Is accordion group open or closed */\n    get: function () {\n      return this._isOpen;\n    },\n    set: function (value) {\n      this._isOpen = value;\n\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AccordionPanelComponent.prototype, \"isBs3\", {\n    get: function () {\n      return isBs3();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AccordionPanelComponent.prototype.ngOnInit = function () {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  };\n\n  AccordionPanelComponent.prototype.ngOnDestroy = function () {\n    this.accordion.removeGroup(this);\n  };\n\n  AccordionPanelComponent.prototype.toggleOpen = function (event) {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  };\n  /** @nocollapse */\n\n\n  AccordionPanelComponent.ctorParameters = function () {\n    return [{\n      type: AccordionComponent,\n      decorators: [{\n        type: Inject,\n        args: [AccordionComponent]\n      }]\n    }];\n  };\n\n  AccordionPanelComponent.propDecorators = {\n    'heading': [{\n      type: Input\n    }],\n    'panelClass': [{\n      type: Input\n    }],\n    'isDisabled': [{\n      type: Input\n    }],\n    'isOpen': [{\n      type: HostBinding,\n      args: ['class.panel-open']\n    }, {\n      type: Input\n    }]\n  };\n\n  AccordionPanelComponent.ɵfac = function AccordionPanelComponent_Factory(t) {\n    return new (t || AccordionPanelComponent)(ɵngcc0.ɵɵdirectiveInject(AccordionComponent));\n  };\n\n  AccordionPanelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AccordionPanelComponent,\n    selectors: [[\"accordion-group\"], [\"accordion-panel\"]],\n    hostVars: 2,\n    hostBindings: function AccordionPanelComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"panel-open\", ctx.isOpen);\n      }\n    },\n    inputs: {\n      isOpen: \"isOpen\",\n      panelClass: \"panelClass\",\n      heading: \"heading\",\n      isDisabled: \"isDisabled\"\n    },\n    ngContentSelectors: _c2,\n    decls: 9,\n    vars: 4,\n    consts: [[1, \"panel\", \"card\", 3, \"ngClass\"], [\"role\", \"tab\", 1, \"panel-heading\", \"card-header\", 3, \"click\"], [1, \"panel-title\", \"card-title\"], [\"role\", \"button\", 1, \"accordion-toggle\"], [3, \"ngClass\", 4, \"ngIf\"], [\"role\", \"tabpanel\", 1, \"panel-collapse\", \"collapse\", 3, \"collapse\"], [1, \"panel-body\", \"card-block\"], [3, \"ngClass\"]],\n    template: function AccordionPanelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function AccordionPanelComponent_Template_div_click_1_listener($event) {\n          return ctx.toggleOpen($event);\n        });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(4, AccordionPanelComponent_div_4_Template, 2, 4, \"div\", 4);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n        ɵngcc0.ɵɵprojection(8, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.panelClass);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isOpen);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.heading);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"collapse\", !ctx.isOpen);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc2.CollapseDirective],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return AccordionPanelComponent;\n}(); //# sourceMappingURL=accordion-group.component.js.map","map":null,"metadata":{},"sourceType":"module"}