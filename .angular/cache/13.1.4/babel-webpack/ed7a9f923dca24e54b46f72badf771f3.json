{"ast":null,"code":"import { Component, EventEmitter, HostListener, Input, Output, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nexport var RATING_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return RatingComponent;\n  }),\n  multi: true\n};\nexport var RatingComponent = function () {\n  function RatingComponent() {\n    /** number of icons */\n    this.max = 5;\n    /** fired when icon selected, $event:number equals to selected rating */\n\n    this.onHover = new EventEmitter();\n    /** fired when icon selected, $event:number equals to previous rating value */\n\n    this.onLeave = new EventEmitter();\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n  }\n\n  RatingComponent.prototype.onKeydown = function (event) {\n    if ([37, 38, 39, 40].indexOf(event.which) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    var sign = event.which === 38 || event.which === 39 ? 1 : -1;\n    this.rate(this.value + sign);\n  };\n\n  RatingComponent.prototype.ngOnInit = function () {\n    this.max = typeof this.max !== 'undefined' ? this.max : 5;\n    this.readonly = this.readonly === true;\n    this.stateOn = typeof this.stateOn !== 'undefined' ? this.stateOn : 'glyphicon-star';\n    this.stateOff = typeof this.stateOff !== 'undefined' ? this.stateOff : 'glyphicon-star-empty';\n    this.titles = typeof this.titles !== 'undefined' && this.titles.length > 0 ? this.titles : ['one', 'two', 'three', 'four', 'five'];\n    this.range = this.buildTemplateObjects(this.ratingStates, this.max);\n  }; // model -> view\n\n\n  RatingComponent.prototype.writeValue = function (value) {\n    if (value % 1 !== value) {\n      this.value = Math.round(value);\n      this.preValue = value;\n      return;\n    }\n\n    this.preValue = value;\n    this.value = value;\n  };\n\n  RatingComponent.prototype.enter = function (value) {\n    if (!this.readonly) {\n      this.value = value;\n      this.onHover.emit(value);\n    }\n  };\n\n  RatingComponent.prototype.reset = function () {\n    this.value = this.preValue;\n    this.onLeave.emit(this.value);\n  };\n\n  RatingComponent.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  RatingComponent.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n\n  RatingComponent.prototype.rate = function (value) {\n    if (!this.readonly && value >= 0 && value <= this.range.length) {\n      this.writeValue(value);\n      this.onChange(value);\n    }\n  };\n\n  RatingComponent.prototype.buildTemplateObjects = function (ratingStates, max) {\n    ratingStates = ratingStates || [];\n    var count = ratingStates.length || max;\n    var result = [];\n\n    for (var i = 0; i < count; i++) {\n      result.push(Object.assign({\n        index: i,\n        stateOn: this.stateOn,\n        stateOff: this.stateOff,\n        title: this.titles[i] || i + 1\n      }, ratingStates[i] || {}));\n    }\n\n    return result;\n  };\n\n  RatingComponent.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'rating',\n      template: \"\\n    <span (mouseleave)=\\\"reset()\\\" (keydown)=\\\"onKeydown($event)\\\" tabindex=\\\"0\\\" role=\\\"slider\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"range.length\\\" [attr.aria-valuenow]=\\\"value\\\">\\n      <template ngFor let-r [ngForOf]=\\\"range\\\" let-index=\\\"index\\\">\\n        <span class=\\\"sr-only\\\">({{ index < value ? '*' : ' ' }})</span>\\n        <i (mouseenter)=\\\"enter(index + 1)\\\" (click)=\\\"rate(index + 1)\\\" class=\\\"glyphicon\\\" [ngClass]=\\\"index < value ? r.stateOn : r.stateOff\\\" [title]=\\\"r.title\\\" ></i>\\n      </template>\\n    </span>\\n  \",\n      providers: [RATING_CONTROL_VALUE_ACCESSOR]\n    }]\n  }];\n  /** @nocollapse */\n\n  RatingComponent.ctorParameters = function () {\n    return [];\n  };\n\n  RatingComponent.propDecorators = {\n    'max': [{\n      type: Input\n    }],\n    'stateOn': [{\n      type: Input\n    }],\n    'stateOff': [{\n      type: Input\n    }],\n    'readonly': [{\n      type: Input\n    }],\n    'titles': [{\n      type: Input\n    }],\n    'ratingStates': [{\n      type: Input\n    }],\n    'onHover': [{\n      type: Output\n    }],\n    'onLeave': [{\n      type: Output\n    }],\n    'onKeydown': [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  };\n  return RatingComponent;\n}(); //# sourceMappingURL=rating.component.js.map","map":null,"metadata":{},"sourceType":"module"}