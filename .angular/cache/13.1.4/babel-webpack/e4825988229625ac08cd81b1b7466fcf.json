{"ast":null,"code":"import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DraggableItemService } from './draggable-item.service';\n/* tslint:disable */\n\n/* tslint:enable */\n\nexport var SortableComponent = function () {\n  function SortableComponent(transfer) {\n    var _this = this;\n    /** class name for items wrapper */\n\n\n    this.wrapperClass = '';\n    /** style object for items wrapper */\n\n    this.wrapperStyle = {};\n    /** class name for item */\n\n    this.itemClass = '';\n    /** style object for item */\n\n    this.itemStyle = {};\n    /** class name for active item */\n\n    this.itemActiveClass = '';\n    /** style object for active item */\n\n    this.itemActiveStyle = {};\n    /** class name for placeholder */\n\n    this.placeholderClass = '';\n    /** style object for placeholder */\n\n    this.placeholderStyle = {};\n    /** placeholder item which will be shown if collection is empty */\n\n    this.placeholderItem = '';\n    /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n     *  Returns new items collection as a payload.\n     */\n\n    this.onChange = new EventEmitter();\n    this.showPlaceholder = false;\n    this.activeItem = -1;\n    this.onTouched = Function.prototype;\n    this.onChanged = Function.prototype;\n    this.transfer = transfer;\n    this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n    this.transfer.onCaptureItem().subscribe(function (item) {\n      return _this.onDrop(item);\n    });\n  }\n\n  Object.defineProperty(SortableComponent.prototype, \"items\", {\n    get: function () {\n      return this._items;\n    },\n    set: function (value) {\n      this._items = value;\n      var out = this.items.map(function (x) {\n        return x.initData;\n      });\n      this.onChanged(out);\n      this.onChange.emit(out);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SortableComponent.prototype.onItemDragstart = function (event, item, i) {\n    this.initDragstartEvent(event);\n    this.onTouched();\n    this.transfer.dragStart({\n      event: event,\n      item: item,\n      i: i,\n      initialIndex: i,\n      lastZoneIndex: this.currentZoneIndex,\n      overZoneIndex: this.currentZoneIndex\n    });\n  };\n\n  SortableComponent.prototype.onItemDragover = function (event, i) {\n    if (!this.transfer.getItem()) {\n      return;\n    }\n\n    event.preventDefault();\n    var dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n    var newArray = [];\n\n    if (!this.items.length) {\n      newArray = [dragItem.item];\n    } else if (dragItem.i > i) {\n      newArray = this.items.slice(0, i).concat([dragItem.item], this.items.slice(i, dragItem.i), this.items.slice(dragItem.i + 1));\n    } else {\n      newArray = this.items.slice(0, dragItem.i).concat(this.items.slice(dragItem.i + 1, i + 1), [dragItem.item], this.items.slice(i + 1));\n    }\n\n    this.items = newArray;\n    dragItem.i = i;\n    this.activeItem = i;\n    this.updatePlaceholderState();\n  };\n\n  SortableComponent.prototype.cancelEvent = function (event) {\n    if (!this.transfer.getItem() || !event) {\n      return;\n    }\n\n    event.preventDefault();\n  };\n\n  SortableComponent.prototype.onDrop = function (item) {\n    if (item && item.overZoneIndex !== this.currentZoneIndex && item.lastZoneIndex === this.currentZoneIndex) {\n      this.items = this.items.filter(function (x, i) {\n        return i !== item.i;\n      });\n      this.updatePlaceholderState();\n    }\n\n    this.resetActiveItem(undefined);\n  };\n\n  SortableComponent.prototype.resetActiveItem = function (event) {\n    this.cancelEvent(event);\n    this.activeItem = -1;\n  };\n\n  SortableComponent.prototype.registerOnChange = function (callback) {\n    this.onChanged = callback;\n  };\n\n  SortableComponent.prototype.registerOnTouched = function (callback) {\n    this.onTouched = callback;\n  };\n\n  SortableComponent.prototype.writeValue = function (value) {\n    var _this = this;\n\n    if (value) {\n      this.items = value.map(function (x, i) {\n        return {\n          id: i,\n          initData: x,\n          value: _this.fieldName ? x[_this.fieldName] : x\n        };\n      });\n    } else {\n      this.items = [];\n    }\n\n    this.updatePlaceholderState();\n  };\n\n  SortableComponent.prototype.updatePlaceholderState = function () {\n    this.showPlaceholder = !this._items.length;\n  };\n\n  SortableComponent.prototype.getItemStyle = function (isActive) {\n    return isActive ? Object.assign({}, this.itemStyle, this.itemActiveStyle) : this.itemStyle;\n  };\n\n  SortableComponent.prototype.initDragstartEvent = function (event) {\n    // it is necessary for mozilla\n    // data type should be 'Text' instead of 'text/plain' to keep compatibility\n    // with IE\n    event.dataTransfer.setData('Text', 'placeholder');\n  };\n\n  SortableComponent.globalZoneIndex = 0;\n  SortableComponent.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'bs-sortable',\n      exportAs: 'bs-sortable',\n      template: \"\\n<div\\n    [ngClass]=\\\"wrapperClass\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    (dragover)=\\\"cancelEvent($event)\\\"\\n    (dragenter)=\\\"cancelEvent($event)\\\"\\n    (drop)=\\\"resetActiveItem($event)\\\"\\n    (mouseleave)=\\\"resetActiveItem($event)\\\">\\n  <div\\n        *ngIf=\\\"showPlaceholder\\\"\\n        [ngClass]=\\\"placeholderClass\\\"\\n        [ngStyle]=\\\"placeholderStyle\\\"\\n        (dragover)=\\\"onItemDragover($event, 0)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n    >{{placeholderItem}}</div>\\n    <div\\n        *ngFor=\\\"let item of items; let i=index;\\\"\\n        [ngClass]=\\\"[ itemClass, i === activeItem ? itemActiveClass : '' ]\\\"\\n        [ngStyle]=\\\"getItemStyle(i === activeItem)\\\"\\n        draggable=\\\"true\\\"\\n        (dragstart)=\\\"onItemDragstart($event, item, i)\\\"\\n        (dragend)=\\\"resetActiveItem($event)\\\"\\n        (dragover)=\\\"onItemDragover($event, i)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n    ><template [ngTemplateOutlet]=\\\"itemTemplate || defItemTemplate\\\"\\n  [ngOutletContext]=\\\"{item:item, index: i}\\\"></template></div>\\n</div>\\n\\n<template #defItemTemplate let-item=\\\"item\\\">{{item.value}}</template>  \\n\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return SortableComponent;\n        }),\n        multi: true\n      }]\n    }]\n  }];\n  /** @nocollapse */\n\n  SortableComponent.ctorParameters = function () {\n    return [{\n      type: DraggableItemService\n    }];\n  };\n\n  SortableComponent.propDecorators = {\n    'fieldName': [{\n      type: Input\n    }],\n    'wrapperClass': [{\n      type: Input\n    }],\n    'wrapperStyle': [{\n      type: Input\n    }],\n    'itemClass': [{\n      type: Input\n    }],\n    'itemStyle': [{\n      type: Input\n    }],\n    'itemActiveClass': [{\n      type: Input\n    }],\n    'itemActiveStyle': [{\n      type: Input\n    }],\n    'placeholderClass': [{\n      type: Input\n    }],\n    'placeholderStyle': [{\n      type: Input\n    }],\n    'placeholderItem': [{\n      type: Input\n    }],\n    'itemTemplate': [{\n      type: Input\n    }],\n    'onChange': [{\n      type: Output\n    }]\n  };\n  return SortableComponent;\n}(); //# sourceMappingURL=sortable.component.js.map","map":null,"metadata":{},"sourceType":"module"}