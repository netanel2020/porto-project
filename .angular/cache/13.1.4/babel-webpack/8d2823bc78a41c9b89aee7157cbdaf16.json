{"ast":null,"code":"import { Component, HostBinding, Input } from '@angular/core';\nimport { TabsetConfig } from './tabset.config'; // todo: add active event to tab\n// todo: fix? mixing static and dynamic tabs position tabs in order of creation\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './tabset.config';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from './ng-transclude.directive';\n\nfunction TabsetComponent_li_1_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵelementStart(1, \"span\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function TabsetComponent_li_1_span_4_Template_span_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var tabz_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      $event.preventDefault();\n      return ctx_r3.removeTab(tabz_r1);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = function (a1) {\n  return [\"nav-item\", a1];\n};\n\nfunction TabsetComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function TabsetComponent_li_1_Template_a_click_1_listener() {\n      var restoredCtx = ɵngcc0.ɵɵrestoreView(_r7);\n      var tabz_r1 = restoredCtx.$implicit;\n      return tabz_r1.active = true;\n    });\n    ɵngcc0.ɵɵelementStart(2, \"span\", 5);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(4, TabsetComponent_li_1_span_4_Template, 2, 0, \"span\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tabz_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"active\", tabz_r1.active)(\"disabled\", tabz_r1.disabled);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(12, _c0, tabz_r1.customClass || \"\"));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"active\", tabz_r1.active)(\"disabled\", tabz_r1.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTransclude\", tabz_r1.headingRef);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(tabz_r1.heading);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", tabz_r1.removable);\n  }\n}\n\nvar _c1 = [\"*\"];\nexport var TabsetComponent = function () {\n  function TabsetComponent(config) {\n    this.clazz = true;\n    this.tabs = [];\n    this.classMap = {};\n    Object.assign(this, config);\n  }\n\n  Object.defineProperty(TabsetComponent.prototype, \"vertical\", {\n    /** if true tabs will be placed vertically */\n    get: function () {\n      return this._vertical;\n    },\n    set: function (value) {\n      this._vertical = value;\n      this.setClassMap();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TabsetComponent.prototype, \"justified\", {\n    /** if true tabs fill the container and have a consistent width */\n    get: function () {\n      return this._justified;\n    },\n    set: function (value) {\n      this._justified = value;\n      this.setClassMap();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TabsetComponent.prototype, \"type\", {\n    /** navigation context class: 'tabs' or 'pills' */\n    get: function () {\n      return this._type;\n    },\n    set: function (value) {\n      this._type = value;\n      this.setClassMap();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TabsetComponent.prototype.ngOnDestroy = function () {\n    this.isDestroyed = true;\n  };\n\n  TabsetComponent.prototype.addTab = function (tab) {\n    this.tabs.push(tab);\n    tab.active = this.tabs.length === 1 && tab.active !== false;\n  };\n\n  TabsetComponent.prototype.removeTab = function (tab) {\n    var index = this.tabs.indexOf(tab);\n\n    if (index === -1 || this.isDestroyed) {\n      return;\n    } // Select a new tab if the tab to be removed is selected and not destroyed\n\n\n    if (tab.active && this.hasAvailableTabs(index)) {\n      var newActiveIndex = this.getClosestTabIndex(index);\n      this.tabs[newActiveIndex].active = true;\n    }\n\n    tab.removed.emit(tab);\n    this.tabs.splice(index, 1);\n  };\n\n  TabsetComponent.prototype.getClosestTabIndex = function (index) {\n    var tabsLength = this.tabs.length;\n\n    if (!tabsLength) {\n      return -1;\n    }\n\n    for (var step = 1; step <= tabsLength; step += 1) {\n      var prevIndex = index - step;\n      var nextIndex = index + step;\n\n      if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {\n        return prevIndex;\n      }\n\n      if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {\n        return nextIndex;\n      }\n    }\n\n    return -1;\n  };\n\n  TabsetComponent.prototype.hasAvailableTabs = function (index) {\n    var tabsLength = this.tabs.length;\n\n    if (!tabsLength) {\n      return false;\n    }\n\n    for (var i = 0; i < tabsLength; i += 1) {\n      if (!this.tabs[i].disabled && i !== index) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  TabsetComponent.prototype.setClassMap = function () {\n    this.classMap = (_a = {\n      'nav-stacked': this.vertical,\n      'nav-justified': this.justified\n    }, _a[\"nav-\" + this.type] = true, _a);\n\n    var _a;\n  };\n  /** @nocollapse */\n\n\n  TabsetComponent.ctorParameters = function () {\n    return [{\n      type: TabsetConfig\n    }];\n  };\n\n  TabsetComponent.propDecorators = {\n    'vertical': [{\n      type: Input\n    }],\n    'justified': [{\n      type: Input\n    }],\n    'type': [{\n      type: Input\n    }],\n    'clazz': [{\n      type: HostBinding,\n      args: ['class.tab-container']\n    }]\n  };\n\n  TabsetComponent.ɵfac = function TabsetComponent_Factory(t) {\n    return new (t || TabsetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TabsetConfig));\n  };\n\n  TabsetComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TabsetComponent,\n    selectors: [[\"tabset\"]],\n    hostVars: 2,\n    hostBindings: function TabsetComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"tab-container\", ctx.clazz);\n      }\n    },\n    inputs: {\n      vertical: \"vertical\",\n      justified: \"justified\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"nav\", 3, \"ngClass\", \"click\"], [3, \"ngClass\", \"active\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [1, \"tab-content\"], [3, \"ngClass\"], [\"href\", \"javascript:void(0);\", 1, \"nav-link\", 3, \"click\"], [3, \"ngTransclude\"], [4, \"ngIf\"], [1, \"glyphicon\", \"glyphicon-remove-circle\", 3, \"click\"]],\n    template: function TabsetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function TabsetComponent_Template_ul_click_0_listener($event) {\n          return $event.preventDefault();\n        });\n        ɵngcc0.ɵɵtemplate(1, TabsetComponent_li_1_Template, 5, 14, \"li\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.classMap);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.tabs);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc3.NgTranscludeDirective, ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return TabsetComponent;\n}(); //# sourceMappingURL=tabset.component.js.map","map":null,"metadata":{},"sourceType":"module"}