{"ast":null,"code":"import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nexport var CollapseDirective = function () {\n  function CollapseDirective(_el, _renderer) {\n    /** This event fires as soon as content collapses */\n    this.collapsed = new EventEmitter();\n    /** This event fires as soon as content becomes visible */\n\n    this.expanded = new EventEmitter(); // shown\n\n    this.isExpanded = true; // hidden\n\n    this.isCollapsed = false; // stale state\n\n    this.isCollapse = true; // animation state\n\n    this.isCollapsing = false;\n    this._el = _el;\n    this._renderer = _renderer;\n  }\n\n  Object.defineProperty(CollapseDirective.prototype, \"collapse\", {\n    get: function () {\n      return this.isExpanded;\n    },\n\n    /** A flag indicating visibility of content (shown or hidden) */\n    set: function (value) {\n      this.isExpanded = value;\n      this.toggle();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** allows to manually toggle content visibility */\n\n  CollapseDirective.prototype.toggle = function () {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  /** allows to manually hide content */\n\n\n  CollapseDirective.prototype.hide = function () {\n    this.isCollapse = false;\n    this.isCollapsing = true;\n    this.isExpanded = false;\n    this.isCollapsed = true;\n    this.isCollapse = true;\n    this.isCollapsing = false;\n    this.display = 'none';\n    this.collapsed.emit(this);\n  };\n  /** allows to manually show collapsed content */\n\n\n  CollapseDirective.prototype.show = function () {\n    this.isCollapse = false;\n    this.isCollapsing = true;\n    this.isExpanded = true;\n    this.isCollapsed = false;\n    this.display = 'block'; // this.height = 'auto';\n\n    this.isCollapse = true;\n    this.isCollapsing = false;\n\n    this._renderer.setElementStyle(this._el.nativeElement, 'overflow', 'visible');\n\n    this._renderer.setElementStyle(this._el.nativeElement, 'height', 'auto');\n\n    this.expanded.emit(this);\n  };\n  /** @nocollapse */\n\n\n  CollapseDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Renderer\n    }];\n  };\n\n  CollapseDirective.propDecorators = {\n    'collapsed': [{\n      type: Output\n    }],\n    'expanded': [{\n      type: Output\n    }],\n    'display': [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    'isExpanded': [{\n      type: HostBinding,\n      args: ['class.in']\n    }, {\n      type: HostBinding,\n      args: ['class.show']\n    }, {\n      type: HostBinding,\n      args: ['attr.aria-expanded']\n    }],\n    'isCollapsed': [{\n      type: HostBinding,\n      args: ['attr.aria-hidden']\n    }],\n    'isCollapse': [{\n      type: HostBinding,\n      args: ['class.collapse']\n    }],\n    'isCollapsing': [{\n      type: HostBinding,\n      args: ['class.collapsing']\n    }],\n    'collapse': [{\n      type: Input\n    }]\n  };\n\n  CollapseDirective.ɵfac = function CollapseDirective_Factory(t) {\n    return new (t || CollapseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer));\n  };\n\n  CollapseDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CollapseDirective,\n    selectors: [[\"\", \"collapse\", \"\"]],\n    hostVars: 12,\n    hostBindings: function CollapseDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-hidden\", ctx.isCollapsed);\n        ɵngcc0.ɵɵstyleProp(\"display\", ctx.display);\n        ɵngcc0.ɵɵclassProp(\"collapse\", ctx.isCollapse)(\"in\", ctx.isExpanded)(\"show\", ctx.isExpanded)(\"collapsing\", ctx.isCollapsing);\n      }\n    },\n    inputs: {\n      collapse: \"collapse\"\n    },\n    outputs: {\n      collapsed: \"collapsed\",\n      expanded: \"expanded\"\n    },\n    exportAs: [\"bs-collapse\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return CollapseDirective;\n}(); //# sourceMappingURL=collapse.directive.js.map","map":null,"metadata":{},"sourceType":"module"}