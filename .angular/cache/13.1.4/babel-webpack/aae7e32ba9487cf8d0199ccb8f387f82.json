{"ast":null,"code":"export var LinkedList = function () {\n  function LinkedList() {\n    this.length = 0;\n    this.asArray = [];\n  }\n\n  LinkedList.prototype.getNode = function (position) {\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    var current = this.head;\n\n    for (var index = 0; index < position; index++) {\n      current = current.next;\n    }\n\n    return current;\n  };\n\n  LinkedList.prototype.createInternalArrayRepresentation = function () {\n    var outArray = [];\n    var current = this.head;\n\n    while (current) {\n      outArray.push(current.value);\n      current = current.next;\n    }\n\n    this.asArray = outArray;\n  };\n\n  LinkedList.prototype.get = function (position) {\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      return void 0;\n    }\n\n    var current = this.head;\n\n    for (var index = 0; index < position; index++) {\n      current = current.next;\n    }\n\n    return current.value;\n  };\n\n  LinkedList.prototype.add = function (value, position) {\n    if (position === void 0) {\n      position = this.length;\n    }\n\n    if (position < 0 || position > this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    var node = {\n      value: value,\n      next: undefined,\n      previous: undefined\n    };\n\n    if (this.length === 0) {\n      this.head = node;\n      this.tail = node;\n      this.current = node;\n    } else {\n      if (position === 0) {\n        // first node\n        node.next = this.head;\n        this.head.previous = node;\n        this.head = node;\n      } else if (position === this.length) {\n        // last node\n        this.tail.next = node;\n        node.previous = this.tail;\n        this.tail = node;\n      } else {\n        // node in middle\n        var currentPreviousNode = this.getNode(position - 1);\n        var currentNextNode = currentPreviousNode.next;\n        currentPreviousNode.next = node;\n        currentNextNode.previous = node;\n        node.previous = currentPreviousNode;\n        node.next = currentNextNode;\n      }\n    }\n\n    this.length++;\n    this.createInternalArrayRepresentation();\n  };\n\n  LinkedList.prototype.remove = function (position) {\n    if (position === void 0) {\n      position = 0;\n    }\n\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    if (position === 0) {\n      // first node\n      this.head = this.head.next;\n\n      if (this.head) {\n        // there is no second node\n        this.head.previous = undefined;\n      } else {\n        // there is no second node\n        this.tail = undefined;\n      }\n    } else if (position === this.length - 1) {\n      // last node\n      this.tail = this.tail.previous;\n      this.tail.next = undefined;\n    } else {\n      // middle node\n      var removedNode = this.getNode(position);\n      removedNode.next.previous = removedNode.previous;\n      removedNode.previous.next = removedNode.next;\n    }\n\n    this.length--;\n    this.createInternalArrayRepresentation();\n  };\n\n  LinkedList.prototype.set = function (position, value) {\n    if (this.length === 0 || position < 0 || position >= this.length) {\n      throw new Error('Position is out of the list');\n    }\n\n    var node = this.getNode(position);\n    node.value = value;\n    this.createInternalArrayRepresentation();\n  };\n\n  LinkedList.prototype.toArray = function () {\n    return this.asArray;\n  };\n\n  LinkedList.prototype.findAll = function (fn) {\n    var current = this.head;\n    var result = [];\n\n    for (var index = 0; index < this.length; index++) {\n      if (fn(current.value, index)) {\n        result.push({\n          index: index,\n          value: current.value\n        });\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  }; // Array methods overriding start\n\n\n  LinkedList.prototype.push = function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i - 0] = arguments[_i];\n    }\n\n    args.forEach(function (arg) {\n      _this.add(arg);\n    });\n    return this.length;\n  };\n\n  LinkedList.prototype.pop = function () {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    var last = this.tail;\n    this.remove(this.length - 1);\n    return last.value;\n  };\n\n  LinkedList.prototype.unshift = function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i - 0] = arguments[_i];\n    }\n\n    args.reverse();\n    args.forEach(function (arg) {\n      _this.add(arg, 0);\n    });\n    return this.length;\n  };\n\n  LinkedList.prototype.shift = function () {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    var lastItem = this.head.value;\n    this.remove();\n    return lastItem;\n  };\n\n  LinkedList.prototype.forEach = function (fn) {\n    var current = this.head;\n\n    for (var index = 0; index < this.length; index++) {\n      fn(current.value, index);\n      current = current.next;\n    }\n  };\n\n  LinkedList.prototype.indexOf = function (value) {\n    var current = this.head;\n    var position = 0;\n\n    for (var index = 0; index < this.length; index++) {\n      if (current.value === value) {\n        position = index;\n        break;\n      }\n\n      current = current.next;\n    }\n\n    return position;\n  };\n\n  LinkedList.prototype.some = function (fn) {\n    var current = this.head;\n    var result = false;\n\n    while (current && !result) {\n      if (fn(current.value)) {\n        result = true;\n        break;\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  };\n\n  LinkedList.prototype.every = function (fn) {\n    var current = this.head;\n    var result = true;\n\n    while (current && result) {\n      if (!fn(current.value)) {\n        result = false;\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  };\n\n  LinkedList.prototype.toString = function () {\n    return '[Linked List]';\n  };\n\n  LinkedList.prototype.find = function (fn) {\n    var current = this.head;\n    var result;\n\n    for (var index = 0; index < this.length; index++) {\n      if (fn(current.value, index)) {\n        result = current.value;\n        break;\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  };\n\n  LinkedList.prototype.findIndex = function (fn) {\n    var current = this.head;\n    var result;\n\n    for (var index = 0; index < this.length; index++) {\n      if (fn(current.value, index)) {\n        result = index;\n        break;\n      }\n\n      current = current.next;\n    }\n\n    return result;\n  };\n\n  return LinkedList;\n}(); //# sourceMappingURL=linked-list.class.js.map","map":null,"metadata":{},"sourceType":"module"}