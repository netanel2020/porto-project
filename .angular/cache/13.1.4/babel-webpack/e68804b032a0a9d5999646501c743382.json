{"ast":null,"code":"// todo: add animation\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { isBs3, LinkedList } from '../utils';\nimport { CarouselConfig } from './carousel.config';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './carousel.config';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction CarouselComponent_ol_1_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function CarouselComponent_ol_1_li_1_Template_li_click_0_listener() {\n      var restoredCtx = ɵngcc0.ɵɵrestoreView(_r7);\n      var i_r5 = restoredCtx.index;\n      var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.selectSlide(i_r5);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var slidez_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"active\", slidez_r4.active === true);\n  }\n}\n\nfunction CarouselComponent_ol_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ol\", 5);\n    ɵngcc0.ɵɵtemplate(1, CarouselComponent_ol_1_li_1_Template, 1, 2, \"li\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.slides);\n  }\n}\n\nfunction CarouselComponent_a_4_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 11);\n    ɵngcc0.ɵɵtext(1, \"Previous\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction CarouselComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"a\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function CarouselComponent_a_4_Template_a_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.previousSlide();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(2, CarouselComponent_a_4_span_2_Template, 2, 0, \"span\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r1.activeSlide === 0 && ctx_r1.noWrap);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.isBs4);\n  }\n}\n\nfunction CarouselComponent_a_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function CarouselComponent_a_5_Template_a_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.nextSlide();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 13);\n    ɵngcc0.ɵɵelementStart(2, \"span\", 11);\n    ɵngcc0.ɵɵtext(3, \"Next\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r2.isLast(ctx_r2.activeSlide) && ctx_r2.noWrap);\n  }\n}\n\nvar _c0 = [\"*\"];\nexport var Direction = /*#__PURE__*/(() => {\n  (function (Direction) {\n    Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n    Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n  })(Direction || (Direction = {}));\n\n  return Direction;\n})();\n\n/**\n * Base element to create carousel\n */\nexport var CarouselComponent = function () {\n  function CarouselComponent(config) {\n    /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n    this.activeSlideChange = new EventEmitter(false);\n    this._slides = new LinkedList();\n    this.destroyed = false;\n    Object.assign(this, config);\n  }\n\n  Object.defineProperty(CarouselComponent.prototype, \"activeSlide\", {\n    get: function () {\n      return this._currentActiveSlide;\n    },\n\n    /** Index of currently displayed slide(started for 0) */\n    set: function (index) {\n      if (this._slides.length && index !== this._currentActiveSlide) {\n        this._select(index);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CarouselComponent.prototype, \"interval\", {\n    /**\n     * Delay of item cycling in milliseconds. If false, carousel won't cycle automatically.\n     */\n    get: function () {\n      return this._interval;\n    },\n    set: function (value) {\n      this._interval = value;\n      this.restartTimer();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CarouselComponent.prototype, \"slides\", {\n    get: function () {\n      return this._slides.toArray();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CarouselComponent.prototype, \"isBs4\", {\n    get: function () {\n      return !isBs3();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CarouselComponent.prototype.ngOnDestroy = function () {\n    this.destroyed = true;\n  };\n  /**\n   * Adds new slide. If this slide is first in collection - set it as active and starts auto changing\n   * @param slide\n   */\n\n\n  CarouselComponent.prototype.addSlide = function (slide) {\n    this._slides.add(slide);\n\n    if (this._slides.length === 1) {\n      this._currentActiveSlide = void 0;\n      this.activeSlide = 0;\n      this.play();\n    }\n  };\n  /**\n   * Removes specified slide. If this slide is active - will roll to another slide\n   * @param slide\n   */\n\n\n  CarouselComponent.prototype.removeSlide = function (slide) {\n    var _this = this;\n\n    var remIndex = this._slides.indexOf(slide);\n\n    if (this._currentActiveSlide === remIndex) {\n      // removing of active slide\n      var nextSlideIndex_1 = void 0;\n\n      if (this._slides.length > 1) {\n        // if this slide last - will roll to first slide, if noWrap flag is FALSE or to previous, if noWrap is TRUE\n        // in case, if this slide in middle of collection, index of next slide is same to removed\n        nextSlideIndex_1 = !this.isLast(remIndex) ? remIndex : this.noWrap ? remIndex - 1 : 0;\n      }\n\n      this._slides.remove(remIndex); // prevents exception with changing some value after checking\n\n\n      setTimeout(function () {\n        _this._select(nextSlideIndex_1);\n      }, 0);\n    } else {\n      this._slides.remove(remIndex);\n\n      var currentSlideIndex_1 = this.getCurrentSlideIndex();\n      setTimeout(function () {\n        // after removing, need to actualize index of current active slide\n        _this._currentActiveSlide = currentSlideIndex_1;\n\n        _this.activeSlideChange.emit(_this._currentActiveSlide);\n      }, 0);\n    }\n  };\n  /**\n   * Rolling to next slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n\n\n  CarouselComponent.prototype.nextSlide = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\n  };\n  /**\n   * Rolling to previous slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n\n\n  CarouselComponent.prototype.previousSlide = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\n  };\n  /**\n   * Rolling to specified slide\n   * @param index: {number} index of slide, which must be shown\n   */\n\n\n  CarouselComponent.prototype.selectSlide = function (index) {\n    this.activeSlide = index;\n  };\n  /**\n   * Starts a auto changing of slides\n   */\n\n\n  CarouselComponent.prototype.play = function () {\n    if (!this.isPlaying) {\n      this.isPlaying = true;\n      this.restartTimer();\n    }\n  };\n  /**\n   * Stops a auto changing of slides\n   */\n\n\n  CarouselComponent.prototype.pause = function () {\n    if (!this.noPause) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  };\n  /**\n   * Finds and returns index of currently displayed slide\n   * @returns {number}\n   */\n\n\n  CarouselComponent.prototype.getCurrentSlideIndex = function () {\n    return this._slides.findIndex(function (slide) {\n      return slide.active;\n    });\n  };\n  /**\n   * Defines, whether the specified index is last in collection\n   * @param index\n   * @returns {boolean}\n   */\n\n\n  CarouselComponent.prototype.isLast = function (index) {\n    return index + 1 >= this._slides.length;\n  };\n  /**\n   * Defines next slide index, depending of direction\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will return undefined if next slide require wrapping\n   * @returns {any}\n   */\n\n\n  CarouselComponent.prototype.findNextSlideIndex = function (direction, force) {\n    var nextSlideIndex = 0;\n\n    if (!force && this.isLast(this.activeSlide) && direction !== Direction.PREV && this.noWrap) {\n      return void 0;\n    }\n\n    switch (direction) {\n      case Direction.NEXT:\n        // if this is last slide, not force, looping is disabled and need to going forward - select current slide, as a next\n        nextSlideIndex = !this.isLast(this._currentActiveSlide) ? this._currentActiveSlide + 1 : !force && this.noWrap ? this._currentActiveSlide : 0;\n        break;\n\n      case Direction.PREV:\n        // if this is first slide, not force, looping is disabled and need to going backward - select current slide, as a next\n        nextSlideIndex = this._currentActiveSlide > 0 ? this._currentActiveSlide - 1 : !force && this.noWrap ? this._currentActiveSlide : this._slides.length - 1;\n        break;\n\n      default:\n        throw new Error('Unknown direction');\n    }\n\n    return nextSlideIndex;\n  };\n  /**\n   * Sets a slide, which specified through index, as active\n   * @param index\n   * @private\n   */\n\n\n  CarouselComponent.prototype._select = function (index) {\n    if (isNaN(index)) {\n      this.pause();\n      return;\n    }\n\n    var currentSlide = this._slides.get(this._currentActiveSlide);\n\n    if (currentSlide) {\n      currentSlide.active = false;\n    }\n\n    var nextSlide = this._slides.get(index);\n\n    if (nextSlide) {\n      this._currentActiveSlide = index;\n      nextSlide.active = true;\n      this.activeSlide = index;\n      this.activeSlideChange.emit(index);\n    }\n  };\n  /**\n   * Starts loop of auto changing of slides\n   */\n\n\n  CarouselComponent.prototype.restartTimer = function () {\n    var _this = this;\n\n    this.resetTimer();\n    var interval = +this.interval;\n\n    if (!isNaN(interval) && interval > 0) {\n      this.currentInterval = setInterval(function () {\n        var nInterval = +_this.interval;\n\n        if (_this.isPlaying && !isNaN(_this.interval) && nInterval > 0 && _this.slides.length) {\n          _this.nextSlide();\n        } else {\n          _this.pause();\n        }\n      }, interval);\n    }\n  };\n  /**\n   * Stops loop of auto changing of slides\n   */\n\n\n  CarouselComponent.prototype.resetTimer = function () {\n    if (this.currentInterval) {\n      clearInterval(this.currentInterval);\n      this.currentInterval = void 0;\n    }\n  };\n  /** @nocollapse */\n\n\n  CarouselComponent.ctorParameters = function () {\n    return [{\n      type: CarouselConfig\n    }];\n  };\n\n  CarouselComponent.propDecorators = {\n    'noWrap': [{\n      type: Input\n    }],\n    'noPause': [{\n      type: Input\n    }],\n    'activeSlideChange': [{\n      type: Output\n    }],\n    'activeSlide': [{\n      type: Input\n    }],\n    'interval': [{\n      type: Input\n    }]\n  };\n\n  CarouselComponent.ɵfac = function CarouselComponent_Factory(t) {\n    return new (t || CarouselComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CarouselConfig));\n  };\n\n  CarouselComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CarouselComponent,\n    selectors: [[\"carousel\"]],\n    inputs: {\n      activeSlide: \"activeSlide\",\n      interval: \"interval\",\n      noWrap: \"noWrap\",\n      noPause: \"noPause\"\n    },\n    outputs: {\n      activeSlideChange: \"activeSlideChange\"\n    },\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 3,\n    consts: [[1, \"carousel\", \"slide\", 3, \"mouseenter\", \"mouseleave\", \"mouseup\"], [\"class\", \"carousel-indicators\", 4, \"ngIf\"], [1, \"carousel-inner\"], [\"class\", \"left carousel-control carousel-control-prev\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"class\", \"right carousel-control carousel-control-next\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"carousel-indicators\"], [3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"left\", \"carousel-control\", \"carousel-control-prev\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"icon-prev\", \"carousel-control-prev-icon\"], [\"class\", \"sr-only\", 4, \"ngIf\"], [1, \"sr-only\"], [1, \"right\", \"carousel-control\", \"carousel-control-next\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"icon-next\", \"carousel-control-next-icon\"]],\n    template: function CarouselComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function CarouselComponent_Template_div_mouseenter_0_listener() {\n          return ctx.pause();\n        })(\"mouseleave\", function CarouselComponent_Template_div_mouseleave_0_listener() {\n          return ctx.play();\n        })(\"mouseup\", function CarouselComponent_Template_div_mouseup_0_listener() {\n          return ctx.play();\n        });\n        ɵngcc0.ɵɵtemplate(1, CarouselComponent_ol_1_Template, 2, 1, \"ol\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, CarouselComponent_a_4_Template, 3, 3, \"a\", 3);\n        ɵngcc0.ɵɵtemplate(5, CarouselComponent_a_5_Template, 4, 2, \"a\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.slides.length > 1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.slides.length > 1);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.slides.length > 1);\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return CarouselComponent;\n}(); //# sourceMappingURL=carousel.component.js.map","map":null,"metadata":{},"sourceType":"module"}