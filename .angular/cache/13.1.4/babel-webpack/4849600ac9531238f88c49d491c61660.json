{"ast":null,"code":"import { Directive, HostBinding, HostListener, Input, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms'; // TODO: config: activeClass - Class to apply to the checked buttons\n\nimport * as ɵngcc0 from '@angular/core';\nexport var CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return ButtonCheckboxDirective;\n  }),\n  multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\n\nexport var ButtonCheckboxDirective = function () {\n  function ButtonCheckboxDirective() {\n    /** Truthy value, will be set to ngModel */\n    this.btnCheckboxTrue = true;\n    /** Falsy value, will be set to ngModel */\n\n    this.btnCheckboxFalse = false;\n    this.state = false;\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n  } // view -> model\n\n\n  ButtonCheckboxDirective.prototype.onClick = function () {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  };\n\n  ButtonCheckboxDirective.prototype.ngOnInit = function () {\n    this.toggle(this.trueValue === this.value);\n  };\n\n  Object.defineProperty(ButtonCheckboxDirective.prototype, \"trueValue\", {\n    get: function () {\n      return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ButtonCheckboxDirective.prototype, \"falseValue\", {\n    get: function () {\n      return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ButtonCheckboxDirective.prototype.toggle = function (state) {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }; // ControlValueAccessor\n  // model -> view\n\n\n  ButtonCheckboxDirective.prototype.writeValue = function (value) {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  };\n\n  ButtonCheckboxDirective.prototype.setDisabledState = function (isDisabled) {\n    this.isDisabled = isDisabled;\n  };\n\n  ButtonCheckboxDirective.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n\n  ButtonCheckboxDirective.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  /** @nocollapse */\n\n\n  ButtonCheckboxDirective.ctorParameters = function () {\n    return [];\n  };\n\n  ButtonCheckboxDirective.propDecorators = {\n    'btnCheckboxTrue': [{\n      type: Input\n    }],\n    'btnCheckboxFalse': [{\n      type: Input\n    }],\n    'state': [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    'onClick': [{\n      type: HostListener,\n      args: ['click']\n    }]\n  };\n\n  ButtonCheckboxDirective.ɵfac = function ButtonCheckboxDirective_Factory(t) {\n    return new (t || ButtonCheckboxDirective)();\n  };\n\n  ButtonCheckboxDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ButtonCheckboxDirective,\n    selectors: [[\"\", \"btnCheckbox\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ButtonCheckboxDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ButtonCheckboxDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.state);\n      }\n    },\n    inputs: {\n      btnCheckboxTrue: \"btnCheckboxTrue\",\n      btnCheckboxFalse: \"btnCheckboxFalse\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_CONTROL_VALUE_ACCESSOR])]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return ButtonCheckboxDirective;\n}(); //# sourceMappingURL=button-checkbox.directive.js.map","map":null,"metadata":{},"sourceType":"module"}