{"ast":null,"code":"import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DateFormatter } from './date-formatter'; // const MIN_DATE:Date = void 0;\n// const MAX_DATE:Date = void 0;\n// const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/*\n const KEYS = {\n 13: 'enter',\n 32: 'space',\n 33: 'pageup',\n 34: 'pagedown',\n 35: 'end',\n 36: 'home',\n 37: 'left',\n 38: 'up',\n 39: 'right',\n 40: 'down'\n };\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction DatePickerInnerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = [\"*\"];\nexport var DatePickerInnerComponent = function () {\n  function DatePickerInnerComponent() {\n    this.selectionDone = new EventEmitter(undefined);\n    this.update = new EventEmitter(false);\n    this.activeDateChange = new EventEmitter(undefined);\n    this.stepDay = {};\n    this.stepMonth = {};\n    this.stepYear = {};\n    this.modes = ['day', 'month', 'year'];\n    this.dateFormatter = new DateFormatter();\n  }\n\n  Object.defineProperty(DatePickerInnerComponent.prototype, \"activeDate\", {\n    get: function () {\n      return this._activeDate;\n    },\n    set: function (value) {\n      this._activeDate = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // todo: add formatter value to Date object\n\n  DatePickerInnerComponent.prototype.ngOnInit = function () {\n    // todo: use date for unique value\n    this.uniqueId = 'datepicker-' + '-' + Math.floor(Math.random() * 10000);\n\n    if (this.initDate) {\n      this.activeDate = this.initDate;\n      this.selectedDate = new Date(this.activeDate.valueOf());\n      this.update.emit(this.activeDate);\n    } else if (this.activeDate === undefined) {\n      this.activeDate = new Date();\n    }\n  }; // this.refreshView should be called here to reflect the changes on the fly\n  // tslint:disable-next-line:no-unused-variable\n\n\n  DatePickerInnerComponent.prototype.ngOnChanges = function (changes) {\n    this.refreshView();\n  };\n\n  DatePickerInnerComponent.prototype.setCompareHandler = function (handler, type) {\n    if (type === 'day') {\n      this.compareHandlerDay = handler;\n    }\n\n    if (type === 'month') {\n      this.compareHandlerMonth = handler;\n    }\n\n    if (type === 'year') {\n      this.compareHandlerYear = handler;\n    }\n  };\n\n  DatePickerInnerComponent.prototype.compare = function (date1, date2) {\n    if (date1 === undefined || date2 === undefined) {\n      return undefined;\n    }\n\n    if (this.datepickerMode === 'day' && this.compareHandlerDay) {\n      return this.compareHandlerDay(date1, date2);\n    }\n\n    if (this.datepickerMode === 'month' && this.compareHandlerMonth) {\n      return this.compareHandlerMonth(date1, date2);\n    }\n\n    if (this.datepickerMode === 'year' && this.compareHandlerYear) {\n      return this.compareHandlerYear(date1, date2);\n    }\n\n    return void 0;\n  };\n\n  DatePickerInnerComponent.prototype.setRefreshViewHandler = function (handler, type) {\n    if (type === 'day') {\n      this.refreshViewHandlerDay = handler;\n    }\n\n    if (type === 'month') {\n      this.refreshViewHandlerMonth = handler;\n    }\n\n    if (type === 'year') {\n      this.refreshViewHandlerYear = handler;\n    }\n  };\n\n  DatePickerInnerComponent.prototype.refreshView = function () {\n    if (this.datepickerMode === 'day' && this.refreshViewHandlerDay) {\n      this.refreshViewHandlerDay();\n    }\n\n    if (this.datepickerMode === 'month' && this.refreshViewHandlerMonth) {\n      this.refreshViewHandlerMonth();\n    }\n\n    if (this.datepickerMode === 'year' && this.refreshViewHandlerYear) {\n      this.refreshViewHandlerYear();\n    }\n  };\n\n  DatePickerInnerComponent.prototype.dateFilter = function (date, format) {\n    return this.dateFormatter.format(date, format);\n  };\n\n  DatePickerInnerComponent.prototype.isActive = function (dateObject) {\n    if (this.compare(dateObject.date, this.activeDate) === 0) {\n      this.activeDateId = dateObject.uid;\n      return true;\n    }\n\n    return false;\n  };\n\n  DatePickerInnerComponent.prototype.createDateObject = function (date, format) {\n    var dateObject = {};\n    dateObject.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    dateObject.label = this.dateFilter(date, format);\n    dateObject.selected = this.compare(date, this.selectedDate) === 0;\n    dateObject.disabled = this.isDisabled(date);\n    dateObject.current = this.compare(date, new Date()) === 0;\n    dateObject.customClass = this.getCustomClassForDate(dateObject.date);\n    return dateObject;\n  };\n\n  DatePickerInnerComponent.prototype.split = function (arr, size) {\n    var arrays = [];\n\n    while (arr.length > 0) {\n      arrays.push(arr.splice(0, size));\n    }\n\n    return arrays;\n  }; // Fix a hard-reproducible bug with timezones\n  // The bug depends on OS, browser, current timezone and current date\n  // i.e.\n  // var date = new Date(2014, 0, 1);\n  // console.log(date.getFullYear(), date.getMonth(), date.getDate(),\n  // date.getHours()); can result in \"2013 11 31 23\" because of the bug.\n\n\n  DatePickerInnerComponent.prototype.fixTimeZone = function (date) {\n    var hours = date.getHours();\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), hours === 23 ? hours + 2 : 0);\n  };\n\n  DatePickerInnerComponent.prototype.select = function (date, isManual) {\n    if (isManual === void 0) {\n      isManual = true;\n    }\n\n    if (this.datepickerMode === this.minMode) {\n      if (!this.activeDate) {\n        this.activeDate = new Date(0, 0, 0, 0, 0, 0, 0);\n      }\n\n      this.activeDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n      if (isManual) {\n        this.selectionDone.emit(this.activeDate);\n      }\n    } else {\n      this.activeDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n      this.datepickerMode = this.modes[this.modes.indexOf(this.datepickerMode) - 1];\n    }\n\n    this.selectedDate = new Date(this.activeDate.valueOf());\n    this.update.emit(this.activeDate);\n    this.refreshView();\n  };\n\n  DatePickerInnerComponent.prototype.move = function (direction) {\n    var expectedStep;\n\n    if (this.datepickerMode === 'day') {\n      expectedStep = this.stepDay;\n    }\n\n    if (this.datepickerMode === 'month') {\n      expectedStep = this.stepMonth;\n    }\n\n    if (this.datepickerMode === 'year') {\n      expectedStep = this.stepYear;\n    }\n\n    if (expectedStep) {\n      var year = this.activeDate.getFullYear() + direction * (expectedStep.years || 0);\n      var month = this.activeDate.getMonth() + direction * (expectedStep.months || 0);\n      this.activeDate = new Date(year, month, 1);\n      this.refreshView();\n      this.activeDateChange.emit(this.activeDate);\n    }\n  };\n\n  DatePickerInnerComponent.prototype.toggleMode = function (direction) {\n    direction = direction || 1;\n\n    if (this.datepickerMode === this.maxMode && direction === 1 || this.datepickerMode === this.minMode && direction === -1) {\n      return;\n    }\n\n    this.datepickerMode = this.modes[this.modes.indexOf(this.datepickerMode) + direction];\n    this.refreshView();\n  };\n\n  DatePickerInnerComponent.prototype.getCustomClassForDate = function (date) {\n    var _this = this;\n\n    if (!this.customClass) {\n      return '';\n    } // todo: build a hash of custom classes, it will work faster\n\n\n    var customClassObject = this.customClass.find(function (customClass) {\n      return customClass.date.valueOf() === date.valueOf() && customClass.mode === _this.datepickerMode;\n    }, this);\n    return customClassObject === undefined ? '' : customClassObject.clazz;\n  };\n\n  DatePickerInnerComponent.prototype.compareDateDisabled = function (date1Disabled, date2) {\n    if (date1Disabled === undefined || date2 === undefined) {\n      return undefined;\n    }\n\n    if (date1Disabled.mode === 'day' && this.compareHandlerDay) {\n      return this.compareHandlerDay(date1Disabled.date, date2);\n    }\n\n    if (date1Disabled.mode === 'month' && this.compareHandlerMonth) {\n      return this.compareHandlerMonth(date1Disabled.date, date2);\n    }\n\n    if (date1Disabled.mode === 'year' && this.compareHandlerYear) {\n      return this.compareHandlerYear(date1Disabled.date, date2);\n    }\n\n    return undefined;\n  };\n\n  DatePickerInnerComponent.prototype.isDisabled = function (date) {\n    var _this = this;\n\n    var isDateDisabled = false;\n\n    if (this.dateDisabled) {\n      this.dateDisabled.forEach(function (disabledDate) {\n        if (_this.compareDateDisabled(disabledDate, date) === 0) {\n          isDateDisabled = true;\n        }\n      });\n    }\n\n    return isDateDisabled || this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0;\n  };\n  /** @nocollapse */\n\n\n  DatePickerInnerComponent.ctorParameters = function () {\n    return [];\n  };\n\n  DatePickerInnerComponent.propDecorators = {\n    'datepickerMode': [{\n      type: Input\n    }],\n    'startingDay': [{\n      type: Input\n    }],\n    'yearRange': [{\n      type: Input\n    }],\n    'minDate': [{\n      type: Input\n    }],\n    'maxDate': [{\n      type: Input\n    }],\n    'minMode': [{\n      type: Input\n    }],\n    'maxMode': [{\n      type: Input\n    }],\n    'showWeeks': [{\n      type: Input\n    }],\n    'formatDay': [{\n      type: Input\n    }],\n    'formatMonth': [{\n      type: Input\n    }],\n    'formatYear': [{\n      type: Input\n    }],\n    'formatDayHeader': [{\n      type: Input\n    }],\n    'formatDayTitle': [{\n      type: Input\n    }],\n    'formatMonthTitle': [{\n      type: Input\n    }],\n    'onlyCurrentMonth': [{\n      type: Input\n    }],\n    'shortcutPropagation': [{\n      type: Input\n    }],\n    'customClass': [{\n      type: Input\n    }],\n    'monthColLimit': [{\n      type: Input\n    }],\n    'yearColLimit': [{\n      type: Input\n    }],\n    'dateDisabled': [{\n      type: Input\n    }],\n    'initDate': [{\n      type: Input\n    }],\n    'selectionDone': [{\n      type: Output\n    }],\n    'update': [{\n      type: Output\n    }],\n    'activeDateChange': [{\n      type: Output\n    }],\n    'activeDate': [{\n      type: Input\n    }]\n  };\n\n  DatePickerInnerComponent.ɵfac = function DatePickerInnerComponent_Factory(t) {\n    return new (t || DatePickerInnerComponent)();\n  };\n\n  DatePickerInnerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DatePickerInnerComponent,\n    selectors: [[\"datepicker-inner\"]],\n    inputs: {\n      activeDate: \"activeDate\",\n      datepickerMode: \"datepickerMode\",\n      startingDay: \"startingDay\",\n      yearRange: \"yearRange\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      minMode: \"minMode\",\n      maxMode: \"maxMode\",\n      showWeeks: \"showWeeks\",\n      formatDay: \"formatDay\",\n      formatMonth: \"formatMonth\",\n      formatYear: \"formatYear\",\n      formatDayHeader: \"formatDayHeader\",\n      formatDayTitle: \"formatDayTitle\",\n      formatMonthTitle: \"formatMonthTitle\",\n      onlyCurrentMonth: \"onlyCurrentMonth\",\n      shortcutPropagation: \"shortcutPropagation\",\n      customClass: \"customClass\",\n      monthColLimit: \"monthColLimit\",\n      yearColLimit: \"yearColLimit\",\n      dateDisabled: \"dateDisabled\",\n      initDate: \"initDate\"\n    },\n    outputs: {\n      selectionDone: \"selectionDone\",\n      update: \"update\",\n      activeDateChange: \"activeDateChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"well well-sm bg-faded p-a card\", \"role\", \"application\", 4, \"ngIf\"], [\"role\", \"application\", 1, \"well\", \"well-sm\", \"bg-faded\", \"p-a\", \"card\"]],\n    template: function DatePickerInnerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, DatePickerInnerComponent_div_0_Template, 2, 0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.datepickerMode);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return DatePickerInnerComponent;\n}(); //# sourceMappingURL=datepicker-inner.component.js.map","map":null,"metadata":{},"sourceType":"module"}